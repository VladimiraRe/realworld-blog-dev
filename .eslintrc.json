{
    "env": {
        "browser": true,
        "es2022": true
    },
    "extends": [
        "eslint:recommended",
        "airbnb",
        "airbnb/hooks",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime", //for using the new JSX transform from React 17
        "plugin:import/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react-redux/recommended",
        "plugin:prettier/recommended" //add as the last extension
    ],
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true,
            "tsx": true
        },
        "ecmaVersion": 13,
        "sourceType": "module", //ECMAScript module - code has a module scope and is run in strict mode
        "requireConfigFile": false,
        "babelOptions": {
            "babelrc": false,
            "configFile": false,
            "presets": ["@babel/preset-react", "@babel/preset-typescript"]
        }
    },
    "plugins": ["react", "jsx-a11y", "@typescript-eslint", "react-redux"],
    "parser": "@babel/eslint-parser",
    "overrides": [
        {
            "files": ["*.{ts,tsx}"],
            "parser": "@typescript-eslint/parser"
        }
    ],
    "rules": {
        "linebreak-style": ["off", "unix"],
        "quotes": ["error", "single", { "avoidEscape": true }], //in .prettierrc singleQuote must be true
        "max-len": ["error", {"code": 120, "ignoreUrls": true}], //keep this and Prettier’s printWidth option in sync
        //rules of eslint-plugin-import:
        "import/no-unresolved": [2, { "caseSensitive": false }], //don't reported if './foo' is actually './Foo'
        "import/order": [
            "error",
            {
                "groups": [
                    "builtin",
                    "external",
                    "internal",
                    "parent",
                    "sibling",
                    "index"
                ],
                "newlines-between": "always" //new line between each group will be enforced,
                //and new lines inside a group will be forbidden
            }
        ],
        //to omit the file extension within the import source path:
        "import/extensions": ["error", "always", { "js": "never",  "jsx": "never", "ts": "never", "tsx": "never"}],
        //rules of eslint-plugin-react:
        "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }], //allow use JSX in set of extensions
        "react/prop-types": 0, //disallow missing props validation in a React component definition,
        //because it is enabled in plugin:react/recommended
        "react/static-property-placement": ["error", "static public field"], //declared 'defaultProps' inside the class body
        "react/state-in-constructor": [0, "always"], //for using 'state' outside the constructor
        "react/destructuring-assignment": ["error", "always", { "ignoreClassFields": true}], //destructuring is not required
        //in class field declarations
        "jsx-a11y/no-autofocus": [ 0, { "ignoreNonDOM": true }],
        "jsx-a11y/label-has-associated-control": [ 2, {
            "assert": "either",
            "depth": 3
        }],
        //allow _ to indicate “private” members of objects
        "no-underscore-dangle": "off",
        //allow to use function before the function declaration because function declarations are hoisted
        "no-use-before-define": ["error", {
            "functions": false,
            "classes": true,
            "variables": true,
            "allowNamedExports": false
        }],
        //allow unary operators ++ and -- in the afterthought (final expression) of a for loop
        "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
        "no-unused-vars": "off",
        //rewrote the rules as the airbnb disallows using 'export { default } from':
        "no-restricted-exports": ["error", {
            "restrictedNamedExports": [
                "then"
            ]
        }],
        //allow multiple classes in one file: 
        "max-classes-per-file": "off",
        "@typescript-eslint/no-unused-vars": "warn",
        //correct: import type { someType } from './type':
        "@typescript-eslint/consistent-type-imports": ["warn", {"prefer": "type-imports"}],
        //correct: function f(a = 0, b) {}:
        "default-param-last": "off",
        //to use an unnamed function in useSelector:
        "react-redux/useSelector-prefer-selectors": ["off"],
        //use TypeScript so so I don't need defaultProps:
        "react/require-default-props": "off",
        "react/jsx-no-useless-fragment": ["error", { "allowExpressions": true }]
    },
    "settings": {
        "import/resolver": { //settings of eslint-plugin-import
            "node": {
                "extensions": [".js", ".jsx", ".ts", ".tsx"],
                "moduleDirectory": ["node_modules", "src/"]
            }
        }
    }
}